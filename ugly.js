const express=require("express");const path=require("path");const slug=require("slug");const multer=require("multer");const bcrypt=require("bcryptjs");const session=require("express-session");const dotenv=require("dotenv").config();const app=express();const PORT=3e3;const mongoose=require("mongoose");const{engine}=require("express-handlebars");const{ObjectId}=mongoose.Types;const passport=require("passport");const LocalStrategy=require("passport-local").Strategy;const GoogleStrategy=require("passport-google-oauth20").Strategy;app.engine("handlebars",engine());app.set("view engine","handlebars");app.set("views","./views");app.use(express.static("static"));app.use(express.urlencoded({extended:true}));const storage=multer.diskStorage({destination:(req,file,setPath)=>{setPath(null,"static/upload/")},filename:(req,file,replaceFileName)=>{console.log(file);replaceFileName(null,Date.now()+path.extname(file.originalname))},destination:(req,file,setPath)=>{setPath(null,"static/upload/")},filename:(req,file,replaceFileName)=>{console.log(file);replaceFileName(null,Date.now()+path.extname(file.originalname))}});const upload=multer({storage:storage});const userSchema=new mongoose.Schema({naam:String,email:String,leeftijd:Number,gebruikersnaam:String,wachtwoord:String,googleId:String,voorkeuren:{energielevel:String,leefstijl:String,grootte:String,slaapritme:String},wishlist:[{type:ObjectId,ref:"Product"}]});userSchema.pre("save",async function(next){try{if(!this.isModified("wachtwoord")){return next()}const salt=await bcrypt.genSalt(10);const hashedPassword=await bcrypt.hash(this.wachtwoord,salt);this.wachtwoord=hashedPassword;next()}catch(error){next(error)}});const User=mongoose.model("User",userSchema,"users");const productShema=new mongoose.Schema({naam:String,soort:String,leeftijd:Number,img:String,beschrijving:String,eigenschappen:{activiteit:String,leefstijl:String,grootte:String,dag:String}});const Product=mongoose.model("Product",productShema,"products");app.use(session({secret:process.env.SESSION_SECRET,resave:false,saveUninitialized:false,cookie:{maxAge:15*60*1e3}}));mongoose.connect(process.env.DB_CONNECTION_STRING,{useNewUrlParser:true,useUnifiedTopology:true}).then(()=>{console.log("Verbonden met de database")});app.get("/",(req,res)=>{res.render("hoofdpagina")});app.get("/admin-login",async(req,res)=>{const errorMessage=req.session.error;req.session.error="";const naam=req.session.loggedIn?req.session.naam:"";res.render("admin-login",{error:errorMessage,naam:naam})});app.get("/login",async(req,res)=>{const errorMessage=req.session.error;req.session.error="";const gebruikersnaam=req.session.loggedIn?req.session.gebruikersnaam:"";res.render("login",{error:errorMessage,gebruikersnaam:gebruikersnaam})});app.get("/signUp",async(req,res)=>{if(req.session.loggedIn){res.redirect("/products")}else{res.render("signUp")}});const admin=new mongoose.Schema({naam:String,wachtwoord:String});const Admin=mongoose.model("Admin",admin,"admins");app.post("/admin-login",(req,res)=>{const{gebruikersnaam,wachtwoord}=req.body;Admin.findOne({naam:gebruikersnaam}).then(admin=>{console.log(admin.naam);if(gebruikersnaam===admin.naam){console.log("Admin login successful");bcrypt.compare(wachtwoord,admin.wachtwoord,(err,result)=>{console.log(result);if(result){console.log("Password matched");req.session.loggedIn=true;req.session.adminUsername=gebruikersnaam;req.session.save(()=>{console.log("Session saved");res.redirect("/producten-overzicht")})}else{console.log("Password did not match");req.session.error="Gebruikersnaam of wachtwoord ongeldig";res.redirect("/admin-login")}})}else{console.log("Admin login failed");req.session.error="Gebruikersnaam of wachtwoord ongeldig";res.redirect("/admin-login")}}).catch(error=>{console.error("Error admin niet gevonden:",error);req.session.error="Inloggen onsuccesvol";res.redirect("/login")})});app.post("/admin-logout",(req,res)=>{req.session.destroy();res.redirect("/admin-login")});app.post("/login",(req,res)=>{const{gebruikersnaam,wachtwoord}=req.body;console.log("Login username:",gebruikersnaam);User.findOne({gebruikersnaam:gebruikersnaam}).then(user=>{if(user){console.log("User found:",user);bcrypt.compare(wachtwoord,user.wachtwoord,(err,result)=>{console.log(result);if(result){console.log("Password matched");req.session.loggedIn=true;req.session.gebruikersnaam=gebruikersnaam;req.session.save(()=>{console.log("Session saved");res.redirect("/products")})}else{console.log("Password did not match");req.session.error="Gebruikersnaam of wachtwoord ongeldig";res.redirect("/login")}})}else{console.log("User not found");req.session.error="Gebruikersnaam of wachtwoord ongeldig";res.redirect("/login")}}).catch(error=>{console.error("Error gebruiker niet gevonden:",error);req.session.error="Inloggen onsuccesvol";res.redirect("/login")})});app.post("/logout",(req,res)=>{req.session.destroy();res.redirect("/login")});app.post("/signUp",(req,res)=>{const{gebruikersnaam,wachtwoord,wachtwoordBevestigen,naam,email,leeftijd}=req.body;console.log(gebruikersnaam);console.log("post request werkt");if(!gebruikersnaam){req.session.error="Vul een gebruikersnaam in";res.redirect("/signup");return}if(wachtwoord!==wachtwoordBevestigen){req.session.error="Wachtwoorden komen niet overeen";res.render("signUp",{error:req.session.error});return}User.findOne({$or:[{gebruikersnaam:gebruikersnaam},{email:email}]}).then(existingUser=>{if(existingUser){req.session.error="Gebruikersnaam of email is al in gebruik";res.render("signUp",{error:req.session.error});return Promise.reject("Duplicate user")}const newUser=new User({naam:naam,email:email,leeftijd:leeftijd,gebruikersnaam:gebruikersnaam,wachtwoord:wachtwoord});return newUser.save()}).then(()=>{console.log("new user");req.session.loggedIn=true;req.session.gebruikersnaam=gebruikersnaam;req.session.save(()=>{res.redirect("/products")})}).catch(error=>{if(error!=="Duplicate user"){console.error("Error gebruiker aanmaken:",error);req.session.error="Gebruiker niet kunnen registreren";res.render("signUp",{error:req.session.error})}})});app.get("/voorkeuren",async(req,res)=>{try{const{gebruikersnaam}=req.session;const gebruiker=await User.findOne({gebruikersnaam:gebruikersnaam});if(gebruiker){const{energielevel,leefstijl,grootte,slaapritme}=gebruiker.voorkeuren;console.log("Ingelogde gebruiker:",gebruikersnaam);console.log("Energielevel:",energielevel);console.log("Leefstijl:",leefstijl);console.log("Grootte:",grootte);console.log("Slaapritme:",slaapritme);res.render("voorkeuren",{energielevel:energielevel,leefstijl:leefstijl,grootte:grootte,slaapritme:slaapritme})}else{console.log("Gebruiker niet gevonden")}}catch(error){console.error("Fout bij het ophalen van gebruikersgegevens:",error)}});app.get("/products",async(req,res)=>{try{const{gebruikersnaam}=req.session;const gebruiker=await User.findOne({gebruikersnaam:gebruikersnaam});if(gebruiker){const{energielevel,leefstijl,grootte,slaapritme}=gebruiker.voorkeuren;console.log("Ingelogde gebruiker:",gebruikersnaam);console.log("Energielevel:",energielevel);console.log("Leefstijl:",leefstijl);console.log("Grootte:",grootte);console.log("Slaapritme:",slaapritme);const query={$or:[{"eigenschappen.energielevel":energielevel},{"eigenschappen.leefstijl":leefstijl},{"eigenschappen.grootte":grootte},{"eigenschappen.slaapritme":slaapritme}]};const producten=await Product.find(query);return res.render("products",{product:producten.map(product=>product.toJSON())})}}catch(error){console.error(error);return res.status(500).send("Er is een fout opgetreden. Probeer het later opnieuw.")}finally{console.log("Alle producten zijn opgehaald")}});app.get("/producten-overzicht",async(req,res)=>{try{if(req.session.loggedIn){const naam=req.session.adminUsername;Admin.findOne({naam:naam}).then(admin=>{console.log(admin);if(admin){const findProducts=async()=>{const products=await Product.find({});res.render("admin-overzicht",{product:products.map(product=>product.toJSON())})};findProducts()}else{res.redirect("/admin-login")}})}else{res.redirect("/admin-login")}}catch(error){console.log(error)}finally{console.log("Got all products for admin")}});const addProduct=async(req,res)=>{try{let{naam,soort,leeftijd,beschrijving,activiteit,leefstijl,grootte,dag}=req.body;naam=naam.charAt(0).toUpperCase()+naam.slice(1);soort=soort.charAt(0).toUpperCase()+soort.slice(1);beschrijving=beschrijving.charAt(0).toUpperCase()+beschrijving.slice(1);activiteit=activiteit.charAt(0).toUpperCase()+activiteit.slice(1);leefstijl=leefstijl.charAt(0).toUpperCase()+leefstijl.slice(1);grootte=grootte.charAt(0).toUpperCase()+grootte.slice(1);dag=dag.charAt(0).toUpperCase()+dag.slice(1);const newProduct=new Product({naam:naam.replace(/[^a-zA-Z]/g,""),soort:soort.replace(/[^a-zA-Z]/g,""),leeftijd:req.body.leeftijd,img:req.file?req.file.filename:null,beschrijving:beschrijving.replace("<",""),eigenschappen:{activiteit:activiteit.replace(/[^a-zA-Z]/g,""),leefstijl:leefstijl.replace(/[^a-zA-Z]/g,""),grootte:grootte.replace(/[^a-zA-Z]/g,""),dag:dag.replace(/[^a-zA-Z]/g,"")}});newProduct.save();console.log("added:",newProduct);setTimeout(()=>{res.redirect("/producten-overzicht")},1e3)}catch(error){console.log(error)}finally{console.log("finally")}};const changeProduct=async(req,res)=>{try{let{naam,leeftijd,soort,beschrijving,id,activiteit,leefstijl,grootte,dag}=req.body;let updateObject={};if(naam)naam=naam.charAt(0).toUpperCase()+naam.slice(1);if(soort)soort=soort.charAt(0).toUpperCase()+soort.slice(1);if(beschrijving)beschrijving=beschrijving.charAt(0).toUpperCase()+beschrijving.slice(1);if(activiteit)activiteit=activiteit.charAt(0).toUpperCase()+activiteit.slice(1);if(leefstijl)leefstijl=leefstijl.charAt(0).toUpperCase()+leefstijl.slice(1);if(grootte)grootte=grootte.charAt(0).toUpperCase()+grootte.slice(1);if(dag)dag=dag.charAt(0).toUpperCase()+dag.slice(1);if(naam)updateObject.naam=naam.replace(/[^a-zA-Z]/g,"");if(leeftijd)updateObject.leeftijd=leeftijd;if(soort)updateObject.soort=soort.replace(/[^a-zA-Z]/g,"");if(beschrijving)updateObject.beschrijving=beschrijving.replace("<","");if(req.file)updateObject.img=req.file.filename;await Product.findOneAndUpdate({_id:id},updateObject).then(()=>console.log("Object updated successfully."));if(activiteit)await Product.findOneAndUpdate({_id:id},{"eigenschappen.activiteit":activiteit.replace(/[^a-zA-Z]/g,"")});if(leefstijl)await Product.findOneAndUpdate({_id:id},{"eigenschappen.leefstijl":leefstijl.replace(/[^a-zA-Z]/g,"")});if(grootte)await Product.findOneAndUpdate({_id:id},{"eigenschappen.grootte":grootte.replace(/[^a-zA-Z]/g,"")});if(dag)await Product.findOneAndUpdate({_id:id},{"eigenschappen.dag":dag.replace(/[^a-zA-Z]/g,"")});setTimeout(()=>{res.redirect("/producten-overzicht")},1e3)}catch(error){console.log(error)}finally{console.log("finally")}};app.post("/producten-overzicht/add",upload.single("image"),addProduct);app.post("/producten-overzicht/change",upload.single("image"),changeProduct);app.get("/producten-overzicht/aanpassen/:id",async(req,res)=>{try{if(req.session.loggedIn){const naam=req.session.adminUsername;Admin.findOne({naam:naam}).then(admin=>{console.log(admin);if(admin){const findProduct=async()=>{const products=await Product.findById(req.params.id);const getItToJson=[];getItToJson.push(products);res.render("admin-aanpassen",{product:getItToJson.map(product=>product.toJSON())})};findProduct()}else{res.redirect("/admin-login")}})}else{res.redirect("/admin-login")}}catch(error){console.log(error)}finally{console.log("Got all products for admin")}});app.get("/producten-overzicht/detail/:id",async(req,res)=>{try{const products=await Product.findById(req.params.id);const getItToJson=[];getItToJson.push(products);res.render("product-detail",{product:getItToJson.map(product=>product.toJSON())})}catch(error){console.log(error)}finally{console.log("got product detail for user")}});app.get("/producten-overzicht/toevoegen",async(req,res)=>{try{if(req.session.loggedIn){const naam=req.session.adminUsername;Admin.findOne({naam:naam}).then(admin=>{console.log(admin);if(admin){res.render("admin-addProducts")}else{res.redirect("/admin-login")}})}else{res.redirect("/admin-login")}}catch(error){console.log(error)}finally{console.log("Got all products for admin")}});app.get("/voorkeuren",(req,res)=>{res.render("voorkeuren",{error:""})});app.post("/voorkeuren",(req,res)=>{const{energielevel,leefstijl,grootte,slaapritme}=req.body;const gebruikersnaam=req.session.gebruikersnaam;User.findOneAndUpdate({gebruikersnaam:gebruikersnaam},{voorkeuren:{energielevel:energielevel,leefstijl:leefstijl,grootte:grootte,slaapritme:slaapritme}},{new:true}).then(()=>{res.redirect("/products")}).catch(error=>{console.error("Error updating preferences:",error);res.render("voorkeuren",{error:"Error updating preferences"})})});app.get("/confirm-form/:id",async(req,res)=>{try{const products=await Product.findById(req.params.id);const getItToJson=[];getItToJson.push(products);res.render("confirm-form",{doggo:getItToJson.map(product=>product.toJSON())})}catch(error){console.log(error)}finally{console.log("afspraak pagina geladen")}});const doggo={naam:"Barry",soort:"Golden retriever",leeftijd:"1",beschrijving:"Barry is een rustige hond die goed met kinderen om kan gaan. Hij houdt erg van buitenspelen en knuffelen."};app.post("/meet",async(req,res,next)=>{try{const person={name:req.body.name,date:req.body.date,time:req.body.time};res.render("confirm",{person:person,doggo:doggo})}catch(err){next(err)}});const GOOGLE_CLIENT_ID=process.env.GOOGLE_CLIENT_ID;const GOOGLE_CLIENT_SECRET=process.env.GOOGLE_CLIENT_SECRET;passport.use(new GoogleStrategy({clientID:GOOGLE_CLIENT_ID,clientSecret:GOOGLE_CLIENT_SECRET,callbackURL:"/auth/google/callback"},async(accessToken,refreshToken,profile,done)=>{try{let user=await User.findOne({googleId:profile.id});if(user){done(null,user)}else{user=await User.create({googleId:profile.id,name:profile.displayName,email:profile.emails[0].value});done(null,user)}}catch(err){done(err,null)}}));app.use(passport.initialize());app.use(passport.session());passport.serializeUser((user,done)=>{done(null,user.id)});passport.deserializeUser(async(id,done)=>{try{const user=await User.findById(id);done(null,user)}catch(err){done(err,null)}});app.get("/auth/google",passport.authenticate("google",{scope:["profile","email"]}));app.get("/auth/google/callback",passport.authenticate("google",{failureRedirect:"/login"}),(req,res)=>{res.redirect("/products")});app.get("/wishlist",async(req,res)=>{try{const user=await User.find({gebruikersnaam:req.session.gebruikersnaam});if(!user){throw new Error("User not found")}let lol=user[0];let iets2=lol.wishlist;console.log(iets2);const multipleP=await Product.find({_id:{$in:iets2}});console.log(multipleP);res.render("wishlist",{wishlist:multipleP.map(product=>product.toJSON())})}catch(error){console.error("Error retrieving wishlist products:",error);throw error}});app.post("/wishlist-add/:id",async(req,res)=>{try{const userUpdate=await User.findOneAndUpdate({gebruikersnaam:req.session.gebruikersnaam},{$push:{wishlist:req.params.id}});console.log(userUpdate);res.redirect("/products")}catch(error){console.error("Error adding product to wishlist:",error);res.status(500).json({error:"Internal server error"})}});app.post("/wishlist-delete/:id",async(req,res)=>{try{const userUpdate=await User.findOneAndUpdate({gebruikersnaam:req.session.gebruikersnaam},{$pull:{wishlist:req.params.id}});console.log(userUpdate);res.redirect("/wishlist")}catch(error){console.error("Error removing product from wishlist:",error);res.status(500).json({error:"Internal server error"})}});app.post("/product-delete/:id",async(req,res)=>{try{const adminUpdate=await Product.findOneAndDelete({_id:req.params.id});console.log(adminUpdate);res.redirect("/producten-overzicht")}catch(error){console.error("Error removing product from list:",error);res.status(500).json({error:"Internal server error"})}});app.get("*",(req,res)=>{res.status(404).render("notfound")});app.listen(PORT,()=>{console.log(`server running on port: ${PORT}`)});